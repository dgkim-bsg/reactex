let Koa,Router,bodyParser,mongoose,api,createFakeData;_36f‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_36f‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_36f‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_36f‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_36f‍.w("./api",[["default",["api"],function(v){api=v}]]);_36f‍.w("./createFakeData",[["default",["createFakeData"],function(v){createFakeData=v}]]);require("dotenv").config();








//비구조화 할당을 통해 process.env 내부값에 대한 래퍼런스 만들기
const { PORT, MONGO_URI } = process.env;
mongoose
    .connect(MONGO_URI, { useNewUrlParser: true, useFindAndModify: false })
    .then(() => {
        console.log("connected to MongoDB");
    })
    .catch((e) => {
        _36f‍.g.console.error(e);
    });

_36f‍.g.console.log(PORT);

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use("/api", api.routes()); // api 라우트 적용

app.use(bodyParser());

// app 인스턴스에 라우터 적용함
app.use(router.routes()).use(router.allowedMethods());

const port = PORT || 4000;
app.listen(port, () => {
    _36f‍.g.console.log("listening to port " + port);
});
